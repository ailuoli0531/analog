package com.born.analog.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.born.analog.module.AffixBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AFFIX_BEAN".
*/
public class AffixBeanDao extends AbstractDao<AffixBean, Void> {

    public static final String TABLENAME = "AFFIX_BEAN";

    /**
     * Properties of entity AffixBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Space = new Property(4, int.class, "space", false, "SPACE");
    }


    public AffixBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AffixBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AFFIX_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"TAG\" TEXT," + // 1: tag
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"SPACE\" INTEGER NOT NULL );"); // 4: space
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AFFIX_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AffixBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSpace());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AffixBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSpace());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AffixBean readEntity(Cursor cursor, int offset) {
        AffixBean entity = new AffixBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4) // space
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AffixBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setSpace(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AffixBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AffixBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AffixBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
