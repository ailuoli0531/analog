package com.born.analog.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.born.analog.module.Pannel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PANNEL".
*/
public class PannelDao extends AbstractDao<Pannel, Void> {

    public static final String TABLENAME = "PANNEL";

    /**
     * Properties of entity Pannel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HP = new Property(0, int.class, "HP", false, "HP");
        public final static Property Defender = new Property(1, int.class, "defender", false, "DEFENDER");
        public final static Property Power = new Property(2, int.class, "power", false, "POWER");
        public final static Property MinAttack = new Property(3, int.class, "minAttack", false, "MIN_ATTACK");
        public final static Property MaxAttack = new Property(4, int.class, "maxAttack", false, "MAX_ATTACK");
        public final static Property EndAttack = new Property(5, int.class, "endAttack", false, "END_ATTACK");
        public final static Property EndAttackT = new Property(6, int.class, "endAttackT", false, "END_ATTACK_T");
        public final static Property Agility = new Property(7, int.class, "agility", false, "AGILITY");
        public final static Property Accurate = new Property(8, int.class, "accurate", false, "ACCURATE");
        public final static Property Elude = new Property(9, int.class, "elude", false, "ELUDE");
        public final static Property CritP = new Property(10, int.class, "critP", false, "CRIT_P");
        public final static Property TcritP = new Property(11, int.class, "TcritP", false, "TCRIT_P");
        public final static Property Cirt = new Property(12, int.class, "cirt", false, "CIRT");
        public final static Property Tcrit = new Property(13, int.class, "Tcrit", false, "TCRIT");
        public final static Property Gold = new Property(14, int.class, "gold", false, "GOLD");
    }


    public PannelDao(DaoConfig config) {
        super(config);
    }
    
    public PannelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PANNEL\" (" + //
                "\"HP\" INTEGER NOT NULL ," + // 0: HP
                "\"DEFENDER\" INTEGER NOT NULL ," + // 1: defender
                "\"POWER\" INTEGER NOT NULL ," + // 2: power
                "\"MIN_ATTACK\" INTEGER NOT NULL ," + // 3: minAttack
                "\"MAX_ATTACK\" INTEGER NOT NULL ," + // 4: maxAttack
                "\"END_ATTACK\" INTEGER NOT NULL ," + // 5: endAttack
                "\"END_ATTACK_T\" INTEGER NOT NULL ," + // 6: endAttackT
                "\"AGILITY\" INTEGER NOT NULL ," + // 7: agility
                "\"ACCURATE\" INTEGER NOT NULL ," + // 8: accurate
                "\"ELUDE\" INTEGER NOT NULL ," + // 9: elude
                "\"CRIT_P\" INTEGER NOT NULL ," + // 10: critP
                "\"TCRIT_P\" INTEGER NOT NULL ," + // 11: TcritP
                "\"CIRT\" INTEGER NOT NULL ," + // 12: cirt
                "\"TCRIT\" INTEGER NOT NULL ," + // 13: Tcrit
                "\"GOLD\" INTEGER NOT NULL );"); // 14: gold
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PANNEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pannel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHP());
        stmt.bindLong(2, entity.getDefender());
        stmt.bindLong(3, entity.getPower());
        stmt.bindLong(4, entity.getMinAttack());
        stmt.bindLong(5, entity.getMaxAttack());
        stmt.bindLong(6, entity.getEndAttack());
        stmt.bindLong(7, entity.getEndAttackT());
        stmt.bindLong(8, entity.getAgility());
        stmt.bindLong(9, entity.getAccurate());
        stmt.bindLong(10, entity.getElude());
        stmt.bindLong(11, entity.getCritP());
        stmt.bindLong(12, entity.getTcritP());
        stmt.bindLong(13, entity.getCirt());
        stmt.bindLong(14, entity.getTcrit());
        stmt.bindLong(15, entity.getGold());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pannel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHP());
        stmt.bindLong(2, entity.getDefender());
        stmt.bindLong(3, entity.getPower());
        stmt.bindLong(4, entity.getMinAttack());
        stmt.bindLong(5, entity.getMaxAttack());
        stmt.bindLong(6, entity.getEndAttack());
        stmt.bindLong(7, entity.getEndAttackT());
        stmt.bindLong(8, entity.getAgility());
        stmt.bindLong(9, entity.getAccurate());
        stmt.bindLong(10, entity.getElude());
        stmt.bindLong(11, entity.getCritP());
        stmt.bindLong(12, entity.getTcritP());
        stmt.bindLong(13, entity.getCirt());
        stmt.bindLong(14, entity.getTcrit());
        stmt.bindLong(15, entity.getGold());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Pannel readEntity(Cursor cursor, int offset) {
        Pannel entity = new Pannel( //
            cursor.getInt(offset + 0), // HP
            cursor.getInt(offset + 1), // defender
            cursor.getInt(offset + 2), // power
            cursor.getInt(offset + 3), // minAttack
            cursor.getInt(offset + 4), // maxAttack
            cursor.getInt(offset + 5), // endAttack
            cursor.getInt(offset + 6), // endAttackT
            cursor.getInt(offset + 7), // agility
            cursor.getInt(offset + 8), // accurate
            cursor.getInt(offset + 9), // elude
            cursor.getInt(offset + 10), // critP
            cursor.getInt(offset + 11), // TcritP
            cursor.getInt(offset + 12), // cirt
            cursor.getInt(offset + 13), // Tcrit
            cursor.getInt(offset + 14) // gold
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pannel entity, int offset) {
        entity.setHP(cursor.getInt(offset + 0));
        entity.setDefender(cursor.getInt(offset + 1));
        entity.setPower(cursor.getInt(offset + 2));
        entity.setMinAttack(cursor.getInt(offset + 3));
        entity.setMaxAttack(cursor.getInt(offset + 4));
        entity.setEndAttack(cursor.getInt(offset + 5));
        entity.setEndAttackT(cursor.getInt(offset + 6));
        entity.setAgility(cursor.getInt(offset + 7));
        entity.setAccurate(cursor.getInt(offset + 8));
        entity.setElude(cursor.getInt(offset + 9));
        entity.setCritP(cursor.getInt(offset + 10));
        entity.setTcritP(cursor.getInt(offset + 11));
        entity.setCirt(cursor.getInt(offset + 12));
        entity.setTcrit(cursor.getInt(offset + 13));
        entity.setGold(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Pannel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Pannel entity) {
        return null;
    }

    @Override
    public boolean hasKey(Pannel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
